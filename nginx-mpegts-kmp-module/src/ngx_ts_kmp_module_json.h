/* auto-generated by generate_json_header.py */

#ifndef ngx_copy_fix
#define ngx_copy_fix(dst, src)   ngx_copy(dst, (src), sizeof(src) - 1)
#endif

#ifndef ngx_copy_str
#define ngx_copy_str(dst, src)   ngx_copy(dst, (src).data, (src).len)
#endif

/* ngx_ts_kmp_connect_mpegts_json writer */

static size_t
ngx_ts_kmp_connect_mpegts_json_get_size(ngx_ts_kmp_connect_t *obj,
    ngx_connection_t *c)
{
    size_t  result;

    result =
        sizeof("{\"stream_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->stream_id) +
        sizeof("\",\"addr\":\"") - 1 + c->addr_text.len +
            ngx_escape_json(NULL, c->addr_text.data, c->addr_text.len) +
        sizeof("\",\"connection\":") - 1 + NGX_INT_T_LEN +
        sizeof("}") - 1;

    return result;
}


static u_char *
ngx_ts_kmp_connect_mpegts_json_write(u_char *p, ngx_ts_kmp_connect_t *obj,
    ngx_connection_t *c)
{
    p = ngx_copy_fix(p, "{\"stream_id\":\"");
    p = ngx_json_str_write(p, &obj->stream_id);
    p = ngx_copy_fix(p, "\",\"addr\":\"");
    p = (u_char *) ngx_escape_json(p, c->addr_text.data, c->addr_text.len);
    p = ngx_copy_fix(p, "\",\"connection\":");
    p = ngx_sprintf(p, "%uA", (ngx_atomic_uint_t) c->number);
    *p++ = '}';

    return p;
}


/* ngx_ts_kmp_connect_json writer */

static size_t
ngx_ts_kmp_connect_json_get_size(ngx_ts_kmp_connect_t *obj, ngx_connection_t
    *c)
{
    size_t  result;

    result =
        sizeof("{\"event_type\":\"connect\"" ",\"input_type\":\"mpegts\""
            ",\"mpegts\":") - 1 + ngx_ts_kmp_connect_mpegts_json_get_size(obj,
            c) +
        sizeof("}") - 1;

    return result;
}


static u_char *
ngx_ts_kmp_connect_json_write(u_char *p, ngx_ts_kmp_connect_t *obj,
    ngx_connection_t *c)
{
    p = ngx_copy_fix(p, "{\"event_type\":\"connect\""
        ",\"input_type\":\"mpegts\"" ",\"mpegts\":");
    p = ngx_ts_kmp_connect_mpegts_json_write(p, obj, c);
    *p++ = '}';

    return p;
}


/* ngx_ts_kmp_track_json writer */

static size_t
ngx_ts_kmp_track_json_get_size(ngx_ts_kmp_track_t *obj)
{
    size_t  result;

    result =
        ngx_kmp_out_track_json_get_size(obj->track);

    return result;
}


static u_char *
ngx_ts_kmp_track_json_write(u_char *p, ngx_ts_kmp_track_t *obj)
{
    p = ngx_kmp_out_track_json_write(p, obj->track);

    return p;
}


/* ngx_ts_kmp_session_json writer */

static size_t
ngx_ts_kmp_session_json_get_size(ngx_ts_kmp_ctx_t *obj)
{
    size_t               result;
    ngx_queue_t         *q;
    ngx_ts_kmp_track_t  *cur;

    result =
        sizeof("{\"remote_addr\":\"") - 1 +
            ngx_json_str_get_size(&obj->remote_addr) +
        sizeof("\",\"local_addr\":\"") - 1 +
            ngx_json_str_get_size(&obj->local_addr) +
        sizeof("\",\"connection\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"uptime\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"stream_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->stream_id) +
        sizeof("\",\"tracks\":[") - 1 +
        sizeof("]}") - 1;

    for (q = ngx_queue_head(&obj->tracks);
        q != ngx_queue_sentinel(&obj->tracks);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_ts_kmp_track_t, queue);
        result += ngx_ts_kmp_track_json_get_size(cur) + sizeof(",") - 1;
    }

    return result;
}


static u_char *
ngx_ts_kmp_session_json_write(u_char *p, ngx_ts_kmp_ctx_t *obj)
{
    ngx_queue_t         *q;
    ngx_ts_kmp_track_t  *cur;

    p = ngx_copy_fix(p, "{\"remote_addr\":\"");
    p = ngx_json_str_write(p, &obj->remote_addr);
    p = ngx_copy_fix(p, "\",\"local_addr\":\"");
    p = ngx_json_str_write(p, &obj->local_addr);
    p = ngx_copy_fix(p, "\",\"connection\":");
    p = ngx_sprintf(p, "%uA", (ngx_atomic_uint_t) obj->connection->number);
    p = ngx_copy_fix(p, ",\"uptime\":");
    p = ngx_sprintf(p, "%i", (ngx_int_t) (ngx_current_msec - obj->start_msec)
        / 1000);
    p = ngx_copy_fix(p, ",\"stream_id\":\"");
    p = ngx_json_str_write(p, &obj->stream_id);
    p = ngx_copy_fix(p, "\",\"tracks\":[");

    for (q = ngx_queue_head(&obj->tracks);
        q != ngx_queue_sentinel(&obj->tracks);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_ts_kmp_track_t, queue);

        if (p[-1] != '[') {
            *p++ = ',';
        }

        p = ngx_ts_kmp_track_json_write(p, cur);
    }

    p = ngx_copy_fix(p, "]}");

    return p;
}


/* ngx_ts_kmp_sessions_json writer */

size_t
ngx_ts_kmp_sessions_json_get_size(void *obj)
{
    size_t             result;
    ngx_queue_t       *q;
    ngx_ts_kmp_ctx_t  *cur;

    result =
        sizeof("[") - 1 +
        sizeof("]") - 1;

    for (q = ngx_queue_head(&ngx_ts_kmp_sessions);
        q != ngx_queue_sentinel(&ngx_ts_kmp_sessions);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_ts_kmp_ctx_t, queue);
        result += ngx_ts_kmp_session_json_get_size(cur) + sizeof(",") - 1;
    }

    return result;
}


u_char *
ngx_ts_kmp_sessions_json_write(u_char *p, void *obj)
{
    ngx_queue_t       *q;
    ngx_ts_kmp_ctx_t  *cur;

    *p++ = '[';

    for (q = ngx_queue_head(&ngx_ts_kmp_sessions);
        q != ngx_queue_sentinel(&ngx_ts_kmp_sessions);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_ts_kmp_ctx_t, queue);

        if (p[-1] != '[') {
            *p++ = ',';
        }

        p = ngx_ts_kmp_session_json_write(p, cur);
    }

    *p++ = ']';

    return p;
}
